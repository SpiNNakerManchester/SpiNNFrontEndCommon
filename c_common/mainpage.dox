/*!
* @cond copright_declaration
* Copyright (c) 2020-2023 The University of Manchester
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* @endcond
*
* @mainpage Support Library and Binaries for SpiNNaker Applications
*
* @section intro Introduction
*
* SpiNNFrontEndCommon includes two key parts:
*
* 1. `front_end_common_lib`, which provides miscellaneous utilities for working
*    with high level SpiNNaker applications as supported by the
*    SpiNNFrontEndCommon Python library.
*
* 2. `models`, which contains various binaries that SpiNNFrontEndCommon deploys
*    to SpiNNaker to support its operations.
*
* @section fec_lib The Front End Common library
*
* The library particularly includes the simulation control framework, the data
* specification access code, and the buffered recording code. For details, see:
*
* * simulation.h
* * data_specification.h
* * recording.h
*
* @section support_models The Support Binaries
*
* These are:
*
* * The chip power monitor, which helps determine the real power consumption of
*   programs running on SpiNNaker. See chip_power_monitor.c
* * The command sender, which is responsible for injecting messages into
*   SpiNNaker from the host system at specified times or in response to key
*   events. See command_sender_multicast_source.c
* * The bitfield compressor system, which reduces the number of messages being
*   delivered to individual cores. See bit_field_sorter_and_searcher.c and
*   bit_field_compressor.c
* * The live packet gatherer, which directs SpiNNaker packets out to the host
*   system while a simulation is running. See live_packet_gather.c
* * The routing table minimiser, which compresses routing tables so they
*   actually fit into SpiNNaker's hardware. See simple_minimise.c
* * The reverse IPTag multicast source, which injects live messages into a
*   running SpiNNaker system. See reverse_iptag_multicast_source.c
* * The extra monitor, which handles packet reinjection when the SpiNNaker
*   network is heavily loaded, and also assists in fast data transfer with
*   non-ethernet chips. See extra_monitor_support.c
* * The data transfer supporter, which handles fast bulk data transfer between
*   the controlling host and SpiNNaker chips. See
*   data_speed_up_packet_gatherer.c
*
* @section cite Preferred Citation
*
* Rowley, A., Brenninkmeijer, C., Davidson, S., Fellows, D., Gait, A.,
* Lester, D., Plana, L., Rhodes, O., Stokes, A., Furber, S.
* __SpiNNTools: The Execution Engine for the SpiNNaker Platform.__
* _Frontiers in Neuroscience,_
* vol 13, pp 231,
* 2019.
* DOI: [10.3389/fnins.2019.00231](https://doi.org/10.3389/fnins.2019.00231)
*/
