# DO NOT EDIT!
# The are the default values
# Edit the cfg in your home directory to change your preferences
# Add / Edit a cfg in the run directory for script specific changes

# Adds to values in PACMAN/pacman/pacman.cfg and SpiNNMan/spinnman/spinnman.cfg
# Which in turn adds to values in SpiNNUtils/spinn_utilities/spinn_utilities.cfg
# and SpiNNMachine/spinn_machine/spinn_machine.cfg

[Reports]
@ = This section controls the reports being run and written.

write_energy_report = False
@write_energy_report = Runs the energy reports.
  This includes adding energy monitor cores which will change placements.
  Therefor the default value is not [Info or Debug](Mode)
path_energy_report = energy_report_(n_run).rpt

write_router_reports = Debug
@write_router_reports = Reports the routes used for each partition.
path_router_reports = edge_routing_info.rpt

write_router_summary_report = Debug
@write_router_summary_report = Writes a summary of the routes used per Chip
path_router_summary_report = routing_summary.rpt

write_partitioner_reports = Info
@write_partitioner_reports = Reports how the Application Vertices/ Populations where partitioned into Machine Vertices/ Cores.
path_partitioner_reports = partitioned_by_vertex.rpt

write_application_graph_placer_report = Info
@write_application_graph_placer_report = Writes both placement reports
path_application_graph_placer_report_vertex = placement_by_vertex_using_graph.rpt
@group_path_application_graph_placer_report_vertex = write_application_graph_placer_report
path_application_graph_placer_report_core = placement_by_core_using_graph.rpt
@group_path_application_graph_placer_report_core = write_application_graph_placer_report

@key_mask_report = These options for a report of the keys and masks
write_router_info_report = Info
@group_write_router_info_report = key_mask_report
path_router_info_report = virtual_key_space_information_report.rpt
@group_path_router_info_report = key_mask_report

write_uncompressed = Debug
@write_uncompressed = Writes the uncompressed routing tables.
path_uncompressed = routing_tables_generated

write_compressed = Debug
@write_compressed = Writes the compressed routing tables.
  Any report for compression may trigger reading these off the machine.
  Compression may only be as far as needed [See]router_table_compress_as_far_as_possible) not as far as possible.
path_compressed = compressed_routing_tables_generated

write_compression_comparison = Debug
@write_compression_comparison = Compares the uncompressed and the compressed routing tables.
  See [write_compressed](write_compressed)
path_compression_comparison = comparison_of_compressed_uncompressed_routing_tables.rpt

write_compression_summary = Debug
@write_compression_summary = Write a summary of the compression done.
  See [write_compressed](write_compressed)
path_compression_summary = compressed_routing_summary.rpt

write_memory_map_report = Debug
@write_memory_map_report = Writes all the memry map reports. the summary and one per Core..
path_memory_map_report_map = memory_map_from_processor_to_address_space
@group_path_memory_map_report_map = write_memory_map_report
path_memory_map_reports = memory_map_reports
@group_path_memory_map_reports = write_memory_map_report

write_network_specification_report = Info
@write_network_specification_report = Write the details of the network.
path_network_specification_report = network_specification.rpt

# provenance goes into the database
read_router_provenance_data = Debug
@read_router_provenance_data = Reads router provenance and writes it into the [database](path_data_database)
read_graph_provenance_data = Debug
@read_graph_provenance_data = Reads graph provenance and writes it into the [database](path_data_database)
read_placements_provenance_data = Debug
@read_placements_provenance_data = Reads placements provenance and writes it into the [database](path_data_database)
read_profile_data = Debug
@read_profile_provenance_data = Reads profile provenance and writes it into the [database](path_data_database)
read_provenance_data_on_end = Debug
@read_provenance_data_on_end = Reads provenace data at the end and writes it into the [database](path_data_database)
write_provenance = Info
@write_provenance = Reads other provenance and writes it into the [database](path_data_database)

write_tag_allocation_reports = Debug
@write_tag_allocation_reports = writes both tag reports.
path_tag_allocation_reports_host = tags.rpt
@group_path_tag_allocation_reports_host = write_tag_allocation_reports
path_tag_allocation_reports_machine = tags_on_machine.txt
@group_path_tag_allocation_reports_machine = write_tag_allocation_reports

write_algorithm_timings = Debug
@write_algorithm_timings = Writes a report of the time all algorithms took.
  Note this is a global report which covers all runs even after reset9s).
tpath_algorithm_timings = algorithm_timings.rpt

write_board_chip_report = Debug
@write_board_chip_report = Writes the reort of the board(s) in use
path_board_chip_report = board_chip_report.txt

write_data_speed_up_reports = Debug
@write_data_speed_up_reports = Runs the reports relating to [data speed up](enable_advanced_monitor_support).
  In small runs advance monitors may not be used even if enabled in which case there will be no report.
path_data_speed_up_reports_speeds = speeds_gained_in_speed_up_process.rpt
@group_path_data_speed_up_reports_speeds = write_data_speed_up_reports
path_data_speed_up_reports_routers = routers_used_in_speed_up_process.rpt
@group_path_data_speed_up_reports_routers = write_data_speed_up_reports

write_sdram_usage_report_per_chip = Info
@write_sdram_usage_report_per_chip = Generates a report on the Sdram usage per Chip and how it was calculated.
path_sdram_usage_report_per_chip = chip_sdram_usage_by_core.rpt

write_json_machine = Debug
@write_json_machine = Write a description of the machine in json format.
  May be [Deleted at the end of the run].(keep_json_files)
path_json_machine = json_files\machine.json

write_json_placements = Debug
@write_json_placements = Writes a description of the placements in json format
  May be [Deleted at the end of the run].(keep_json_files)
path_json_placements = json_files\placements.json

write_json_routing_tables = Debug
@write_json_routing_tables = Writes a description of the routing tables in json format
  May be [Deleted at the end of the run].(keep_json_files)
path_json_routing_tables = json_files\routing_tables.json

keep_json_files = Debug
@keep_json_files = If set False this will delete any json files written at the end of the run.

write_compressor_iobuf = Debug
@write_compressor_iobuf = Reads and writes the commpressor iobuff.
  There will be no iobuf if a host [compressor](compressor) is used or there is [no need to compress](router_table_compress_as_far_as_possible)
  This will be written to [path_iobuf_system](path_iobuf_system)

write_bit_field_compressor_report = Debug
@write_bit_field_compressor_report = writes the bit rield compressor report.
   Run even without bitfield compression.
path_bit_field_compressor_report = bit_field_compressed_summary.rpt

write_drift_report_start = Debug
@group_write_drift_report_start = path_drift_report
write_drift_report_end = Debug
@group_write_drift_report_end = path_drift_report
path_drift_report = clock_drift.csv
@path_drift_report = Reports the clock drift at the start and/or end of the run.
                     Either all Chips or justthe ethernet ones.
drift_report_ethernet_only = True
@group_drift_report_ethernet_only = path_drift_report

write_text_specs = Debug
@write_text_specs = Writes a text version of the dataspecs.
  Note: The [database](path_data_database) is what is actually used for loading the data specs.
path_text_specs = data_spec_text_files

write_fixed_routes_report = Debug
@write_fixed_routes_report = Writes the report for fisxed yours if they are used.
   Unlikely to exist in [enable_advanced_monitor_support](enable_advanced_monitor_support) is False
path_fixed_routes_report = fixed_route_routers

max_reports_kept = 10
@max_reports_kept = The code will attempt to remove old directories in the [Reports Folder](default_report_file_path)
  if they have finished and/or [possibly errored](remove_errored_folders).
  This controls how many are kept.
remove_errored_folders = True
@remove_errored_folders = If True will also [Remove](max_reports_kept) the older error runs.

display_algorithm_timings = True
@display_algorithm_timings = [Logs](instantiate) the time each algorithm took.

extract_iobuf = Debug
@extract_iobuf = Reads the iobuf from the cores and saves them dividied by app and system cores.
path_iobuf_app = provenance_data\app_provenance_data
@group_path_iobuf_app = extract_iobuf
path_iobuf_system = provenance_data\system_provenance_data
@group_path_iobuf_system = extract_iobuf
extract_iobuf_from_cores = ALL
@extract_iobuf_from_cores = Effects what [iobuff is extrracted](extract_iobuf).
  * legal Values are:
  \t* All: All cores . Ignores [extract_iobuf_from_binary_types)(extract_iobuf_from_binary_types)
  \t* None: Use only cores specified by [extract_iobuf_from_binary_types)(extract_iobuf_from_binary_types)
  \t* Some [Syntax for some chips](specifying_chip_cores_link)
extract_iobuf_from_binary_types = None
@extract_iobuf_from_binary_types = Comma seperate list of binary names for cores to extract
clear_iobuf_during_run = True
@clear_iobuf_during_run = At the end of each run the Chip iobuf can be cleared.
  Run after any extraction or if there is no extraction.

provenance_report_cutoff = 20
@provenance_report_cutoff = If provenace is being [written to the database](write_provenance)
  this will liit the amount that will be [Logged](instantiate)

keep_data_database = Info
path_data_database = data(reset_str).sqlite3
@path_data_database = Database file to hold data read back from the machine including [Provenance](write_provenance)

keep_dataspec_database = Debug
path_dataspec_database = ds(reset_str).sqlite3
@path_dataspec_databas = Database used to hold the data spec (to be) written to the cores.

keep_input_output_database = Info
path_input_output_database = input_output_database.sqlite3
@path_input_output_database = live event connection database. Includes metadata.

keep_java_log = Debug
path_java_log = jspin.log
@path_java_log = Log file used by [Java](use_java)

keep_stack_trace = Info
tpath_stack_trace = stack_trace

tpath_global_provenance = global_provenance.sqlite3

[Machine]
#-------
# Information about the target SpiNNaker board or machine:
# machineName: The name or IP address of the target board
# down_cores: Cores that are not working
# down_chips: Chips that are not working
# core_limit: The maximum number of cores to use on the board
# machineTimeStep: Internal time step in simulations in u_secs)
# timeScaleFactor: Change this to slow down the simulation time
#                  relative to real time.
# appID:           Used by sark to identify the user's application.
spalloc_port = 22244
spalloc_user = None
spalloc_group = None
spalloc_machine = None
spalloc_use_proxy = True
# A comma seperated list of ip addresses to avoid.
spalloc_avoid_boards = None

simulation_time_step = 1000
time_scale_factor = None

clear_routing_tables = False
clear_tags = False

enable_advanced_monitor_support = True
enable_reinjection = True
disable_advanced_monitor_usage_for_data_in = False

reset_machine_on_startup = False
post_simulation_overrun_before_error = 5

# format is:
#     bmp_names     = <host>[/(<board-range>|board_id[,board_id]*)
#     <board_range> = <board_id>-<board_id>
# where:
#     <host> is the hostname or IP address of the BMP
#     <board_range> is a range of boards that the BMP can speak to
#     <board_id> is the ID of a single board in a frame
# Note this no longer supports multiple host nor cabinet or frame
bmp_names = None

auto_detect_bmp = False

# Note: if json_path is set all other configs for virtual boards are ignored
json_path = None

[Mapping]
@ = TODO
placer = ApplicationPlacer
info_allocator = ZonedRoutingInfoAllocator
router = ApplicationRouter
routing_table_generator = MergedRoutingTableGenerator
precompressor = None
compressor = PairOnChipRouterCompression
# If None the normal compressor is tried and may be skipped
virtual_compressor = PairCompressor

# If True will read compressed routing tables and check them
run_compression_checker = Debug
path_compression_checker = routing_compression_checker_report.rpt

validate_routes_uncompressed = False
validate_json = Debug

[Buffers]
use_auto_pause_and_resume = True
#chip_power_monitor_buffer = 1048576
#store_buffer_data_in_file = True
minimum_auto_time_steps = 1000

[Mode]
@ = Mode allow to globally turn on groups of reports.
  * Mode will never turn off a report set to True in the cfg file
  * Only the value from the last cfg file read is used.
    \t* Default file
    \t* Home directory
    \t* Script directory
  * Mode acts after all cfg files have been read
  * The values of mode supported are:
    \t* Production: Does not turn on any cfg options.
      All cfg values of "info" and "debug" will be replaced with False
    \t* Info: Turns on the the most import reports.
      All cfg values of "info" are replaced with True while "debug" will be replaced with False
    \t* Debug: Turns on all reports except ones which change the Placements
      All cfg values of "info" and "debug" will be replaced with True
    \t* All: Testing option. May be removed.

mode = Production

[Database]
create_database = None
wait_on_confirmation = True
wait_on_confirmation_timeout = 10
create_routing_info_to_neuron_id_mapping = True

[EnergyMonitor]
sampling_frequency = 10
n_samples_per_recording_entry = 100

[Java]
use_java = False
# controlled by use java
path_json_java_placements = json_files\java_placements.json
@group_path_json_java_placements = use_java

# call to start a Java process.
# If there is no jdk../bin in your class path this must include the full path
java_call = java

# Absolute path to where the JavaSpiNNaker git repository is located.
# This must point to a local copy of
# https://github.com/SpiNNakerManchester/JavaSpiNNaker
# It must also have been built!
# If none it will be assumed to be in the same parent directory as SpiNNFrontEndCommon
# Note: Do not quote even if path has spaces as these added by subprocess.call
java_spinnaker_path = None

# Absolute path to where the spinnaker-exe.jar is located.
# Get this from the latest release at https://github.com/SpiNNakerManchester/JavaSpiNNaker
# Only use this if you have not built JavaSpiNNaker
java_jar_path = None

# Properties flag to be passed into every Java call.
# Default logging level is info so NO properties needed
java_properties = None
# Each Property must start with the -D flag
# To turn on debug level logging (lots)
# java_properties=-Dlogging.level=DEBUG
# Multiple properties are supported.
# Properties must be separated with a space and without quotes.
# java_properties=-Dspinnaker.compare.download -Dlogging.level=DEBUG
# Supported properties are:
#     spinnaker.compare.download  (enables comparisons of multiple download methods; slow)
#     spinnaker.parallel_tasks    (how many downloads to do in parallel; default: 4)
#     logging.level  (defaults to INFO; DEBUG is also useful)
#     logging.udp    (enables low-level logging of UDP traffic; produces a lot of output)
#     spinnaker.scp_timeout       (how long to wait for SCP replies from
#                                 SpiNNaker, in milliseconds, which may need to
#                                 be raised on very busy networks; default: 1000)
