[Logging]
# ------
# Logging levels are as specified for the Python logging module.
# Listing a module below overrides the default logging level for that module
# and its children (unless they are also overridden).
#
# e.g., the following sample would set the default level to info, but display
# debug messages for pacman103.front.pynn, and only display warning messages
# for pacman.core
#
#     default = info
#     debug = front.pynn
#     info =
#     warning = core
#     error =
#     critical =
#
# The ```instantiate``` option determines whether front-ends set up loggers.
# If ```instantiate``` is True then users do not need to set up their own
# loggers.  If it is False, then users need to instantiate a logger at the top
# of each script, this is simply achieved by inserting the following lines at
# the top of the file.
#
#    include logging
#    logger = logging.basicConfig()
#
instantiate = True
default = info
debug =
info =
warning =
error =
critical =

[Reports]
# If reportsEnabled is false, no text reports are written.
# write_text_specs: If True, produce text version of each Data Spec,
#                 in reports/dataSpec directory
# write_router_reports: If True, each router file is written in
#                 text format to reports/routers
reports_enabled = True
write_energy_report = False
write_text_specs = False
write_router_reports = False
write_partitioner_reports = True
write_application_graph_placer_report = True
write_machine_graph_placer_report = False
write_router_info_report = True
write_routing_table_reports = True
write_routing_tables_from_machine_report = True
write_memory_map_report = False
write_network_specification_report = True
write_provenance_data = True
write_tag_allocation_reports = True
write_algorithm_timings = True
write_reload_steps = False

# NOTE ***that for bespoke file paths, folders will not be automatically deleted***
# options are DEFAULT or a file path
# Note for hard coded locations a "reports" sub directory will be added
default_report_file_path = DEFAULT

# options are DEFAULT, or a file path
# Note for hard coded locations an "application_generated_data_files" sub directory is created
default_application_data_file_path = DEFAULT

max_reports_kept = 10
max_application_binaries_kept = 10
provenance_format = xml

display_algorithm_timings = True
extract_iobuf = False
extract_iobuf_during_run = True
extract_iobuf_from_cores = ALL
extract_iobuf_from_binary_types = None
clear_iobuf_during_run = True
# If set True will cause an extra file to be written showing which Algormthms Pacman ran
# Where the code is based and what kind of input and output
write_pacman_executor_provenance = False

[Machine]
#-------
# Information about the target SpiNNaker board or machine:
# machineName: The name or IP address of the target board
# down_cores: Cores that are not working
# down_chips: Chips that are not working
# core_limit: The maximum number of cores to use on the board
# machineTimeStep: Internal time step in simulations in u_secs)
# timeScaleFactor: Change this to slow down the simulation time
#                  relative to real time.
# appID:           Used by sark to identify the user's application.
machine_spec_file = None

machine_name = None
version = None

remote_spinnaker_url = None

spalloc_server = None
spalloc_port = 22244
spalloc_user = None
spalloc_machine = None

virtual_board = False
requires_wrap_arounds = None

machine_time_step = 1000
time_scale_factor = None

# format is:
#    down_cores = <down_core_id>[:<down_core_id]*
#    <down_core_id> = <chip_x>,<chip_y>,<core_id>
#    down_chips = <down_chip_id>[:<down_chip_id]*
#    <down_chip_id> = <chip_x>,<chip_y>
# where:
#    <chip_x> is the x-coordinate of a down chip
#    <chip_y> is the y-coordinate of a down chip
#    <core_id> is the virtual core id of a core
down_cores = None
down_chips = None
down_links = None
core_limit = None

appID = None

# format is:
#     bmp_names     = <bmp_id>[:<bmp_id>]*
#     <bmp_id>      = [[<cabinet_id>;]<frame_id>;]<host>[/(<board-range>|board_id[,board_id]*)]
#     <board_range> = <board_id>-<board_id>
# where:
#     <cabinet_id> is the id of a cabinet
#     <frame_id> is the id of a frame in a cabinet
#     <host> is the hostname or IP address of the BMP
#     <board_range> is a range of boards that the BMP can speak to
#     <board_id> is the id of a single board in a frame
bmp_names = None
number_of_boards = None
width = None
height = None
scamp_connections_data = None
boot_connection_port_num = None

auto_detect_bmp = False
turn_off_machine = False
clear_routing_tables = False
clear_tags = False
enable_reinjection = True

reset_machine_on_startup = False
post_simulation_overrun_before_error = 5
max_sdram_allowed_per_chip = None

[Mapping]

# Algorithms below
# pacman algorithms are:
# Basic_dijkstra_routing, RadialPlacer, BasicPlacer, ConnectiveBasedPlacer,
# BasicTagAllocator, BasicPartitioner, PartitionAndPlacePartitioner,
# BasicRoutingInfoAllocator, BasicDijkstraRouting,
# MallocBasedRoutingInfoAllocator, GraphEdgeFilter, EdgeToNKeysMapper

# These algorithms should be run
application_to_machine_graph_algorithms = PartitionAndPlacePartitioner
machine_graph_to_machine_algorithms = None # Overwritten in Specific config file
machine_graph_to_virtual_machine_algorithms = None # Overwritten in Specific config file
loading_algorithms = MundyOnChipRouterCompression


# format is <path1>,<path2>
extra_xmls_paths = None

[SpecExecution]
#-------------
# specExecOnHost: If True, execute specs on host then download to SpiNNaker
#                 False not yet support, where specs are downloaded
#                 to SpiNNaker and then executed.
spec_exec_on_host = True

[Buffers]
use_auto_pause_and_resume = True
chip_power_monitor_buffer = 1048576
store_buffer_data_in_file = True

[Mode]
# mode = Production or Debug
# In Debug mode all report boolean config values are automitcally overwritten to True

mode = Production
verify_writes = False
violate_1ms_wall_clock_restriction = False
violate_no_vertex_in_graphs_restriction = False

[Database]
create_database = None
wait_on_confirmation = True
send_start_notification = True
send_stop_notification = True

[EnergyMonitor]
sampling_frequency = 10
n_samples_per_recording_entry = 100

[EnergySavings]
# Valid options:
# True  Which will make sure the board is off at this point
# False Which will make sure the board is on at this point
turn_off_board_after_discovery = False
