[Logging]
# ------
# Logging levels are as specified for the Python logging module.
# Listing a module below overrides the default logging level for that module
# and its children (unless they are also overridden).
#
# e.g., the following sample would set the default level to info, but display
# debug messages for pacman103.front.pynn, and only display warning messages
# for pacman.core
#
#     default = info
#     debug = front.pynn
#     info =
#     warning = core
#     error =
#     critical =
#
# The ```instantiate``` option determines whether front-ends set up loggers.
# If ```instantiate``` is True then users do not need to set up their own
# loggers.  If it is False, then users need to instantiate a logger at the top
# of each script, this is simply achieved by inserting the following lines at
# the top of the file.
#
#    include logging
#    logger = logging.basicConfig()
#
instantiate = True
default = info
debug =
info =
warning =
error =
critical =

# Note log levels set above does not change the log message reported at the
# end of the run

# Set to true and all log messages warning or above will be written to file
# Set to false these will be shown at the end of the run
warnings_at_end_to_file = False

[Reports]
# If reportsEnabled is false, no text reports are written.
# write_text_specs: If True, produce text version of each Data Spec,
#                 in reports/dataSpec directory
# write_router_reports: If True, each router file is written in
#                 text format to reports/routers
reports_enabled = True
write_energy_report = False
write_text_specs = False
write_router_reports = False
write_router_summary_report = False
write_compressed_router_summary_report = False
write_partitioner_reports = True
write_application_graph_placer_report = True
write_machine_graph_placer_report = False
write_router_info_report = True
write_routing_table_reports = True
write_routing_tables_from_machine_reports = True
write_routing_table_compression_bit_field_summary = True
write_memory_map_report = False
write_network_specification_report = True
write_provenance_data = True
read_provenance_data = True
write_tag_allocation_reports = True
write_algorithm_timings = True
write_board_chip_report = True
write_data_speed_up_reports = False
write_sdram_usage_report_per_chip = True
write_json_machine = False
write_json_machine_graph = False
write_json_placements = False
write_json_routing_tables = False
write_json_partition_n_keys_map = False
write_compressor_iobuf = False
write_bit_field_compressor_report = False

# NOTE ***that for bespoke file paths, folders will not be automatically deleted***
# options are DEFAULT or a file path
# Note for hard coded locations a "reports" sub directory will be added
default_report_file_path = DEFAULT

max_reports_kept = 10
max_application_binaries_kept = 10
provenance_format = sql

display_algorithm_timings = True
extract_iobuf = True
extract_iobuf_during_run = True
extract_iobuf_from_cores = ALL
extract_iobuf_from_binary_types = None
clear_iobuf_during_run = True
# If set True will cause an extra file to be written showing which Algormthms Pacman ran
# Where the code is based and what kind of input and output
write_pacman_executor_provenance = False

[Machine]
#-------
# Information about the target SpiNNaker board or machine:
# machineName: The name or IP address of the target board
# down_cores: Cores that are not working
# down_chips: Chips that are not working
# core_limit: The maximum number of cores to use on the board
# machineTimeStep: Internal time step in simulations in u_secs)
# timeScaleFactor: Change this to slow down the simulation time
#                  relative to real time.
# appID:           Used by sark to identify the user's application.
machine_spec_file = None

# machine name is typically a URL and then version is required
machine_name = None
version = None

remote_spinnaker_url = None

spalloc_server = None
spalloc_port = 22244
spalloc_user = None
spalloc_machine = None

# If using virtual_board both width and height must be set
virtual_board = False
RouterTableEntriesPerRouter = 1023
MaxSDRAMSize = 134217728

machine_time_step = 1000
time_scale_factor = None

# format is:
#    down_cores = <down_core_id>[:<down_core_id]*
#    <down_core_id> = <chip_x>,<chip_y>,<core_id>[,<ip>]
#    down_chips = <down_chip_id>[:<down_chip_id]*
#    <down_chip_id> = <chip_x>,<chip_y>[,<ip>]
#    down_links = <down_link_id>:[:<down_link_id>]*
# where:
#    <chip_x> is the x-coordinate of a down chip
#    <chip_x> is the y-coordinate of a down chip
#    <core_id> is the virtual core ID of a core if > 0 or the phsical core if <= 0
#    <ip> is an OPTIONAL ip address in the 127.0.0.0 format.
#         If provided the <chip_x> <chip_y> will be considered local to the board with this ip address
down_cores = None
down_chips = None
down_links = None

# Allows the setting of max number of cores per chip
# Set to None to use the default value.
max_machine_core = None
# For the max virtual machine this can be reduced by
max_machine_core_reduction = 1

appID = None

# format is:
#     bmp_names     = <bmp_id>[:<bmp_id>]*
#     <bmp_id>      = [[<cabinet_id>;]<frame_id>;]<host>[/(<board-range>|board_id[,board_id]*)]
#     <board_range> = <board_id>-<board_id>
# where:
#     <cabinet_id> is the ID of a cabinet
#     <frame_id> is the ID of a frame in a cabinet
#     <host> is the hostname or IP address of the BMP
#     <board_range> is a range of boards that the BMP can speak to
#     <board_id> is the ID of a single board in a frame
bmp_names = None
# Currently unused
number_of_boards = None
width = None
height = None
# Note: if json_path is set all other configs for virtual boards are ignored
json_path = None
scamp_connections_data = None
boot_connection_port_num = None

auto_detect_bmp = False
turn_off_machine = False
clear_routing_tables = False
clear_tags = False
report_waiting_logs = False

enable_advanced_monitor_support = True
enable_reinjection = True
disable_advanced_monitor_usage_for_data_in = False

reset_machine_on_startup = False
post_simulation_overrun_before_error = 5
max_sdram_allowed_per_chip = None

# This setting should always be False unless an error has been reported on spinnakerusers@googlegroups.com
# This allows the actual machine found to be "repaired" to hide hardware faults.
repair_machine = False

# When True if any non ethernet chip claims it has a IP address this is logged and ignored
# When False the whole chip is removed
ignore_bad_ethernets = True

[Mapping]

# Algorithms below - format is  <algorithm_name>,<>

# These algorithms should be run
application_to_machine_graph_algorithms = None
machine_graph_to_machine_algorithms = None # Overwritten in Specific config file
machine_graph_to_virtual_machine_algorithms = None # Overwritten in Specific config file
loading_algorithms = None # Overwritten in Specific config file

router_table_compression_target_length = 1023
router_table_compress_as_far_as_possible = False
router_table_compress_as_needed = True

router_table_compression_with_bit_field_use_time_cutoff = True
router_table_compression_with_bit_field_iteration_time = 1000
router_table_compression_with_bit_field_pre_alloced_sdram = 10000
router_table_compression_with_bit_field_acceptance_threshold = 0
router_table_compression_with_bit_field_retry_count = None

# format is <path1>,<path2>
extra_xmls_paths = None

[Simulation]

# performance controller to ensure only so many packets from a given
# app vertex happen at any given time (aka how many machine vertices
# from this app vertex can fire at same time)
app_machine_quantity = 25

# performance controller for how long to wait in-between cores firing. Used
# as a throttle to handle slow core processing. Only one of the following
# can be not None, though if both are, this will be computed:
# time_between_cores unit = microseconds
time_between_cores = None
# or clock_cycles_between_cores unit = clock cycles
clock_cycles_between_cores = None

# performance controller for how much of the time step to use for sending.
# Only one of the following can be not None:
fraction_of_time_spike_sending = 0.8
clock_cycles_sending = None

# performance controller for how much of the time step to use for before the
# TDMA.  Only one of the following can be not None:
fraction_of_time_before_sending = None
clock_cycles_before_sending = 600

# performance controller for how much of the time step to use for spreading
# application vertices.  Only one of the following can be not None:
fraction_of_time_for_offset = None
clock_cycles_for_offset = 1000


[Buffers]
use_auto_pause_and_resume = True
chip_power_monitor_buffer = 1048576
store_buffer_data_in_file = True
minimum_auto_time_steps = 1000

[Mode]
# mode = Production or Debug
# In Debug mode all report boolean config values are automitcally overwritten to True

mode = Production
verify_writes = False
violate_1ms_wall_clock_restriction = False

[Database]
create_database = None
wait_on_confirmation = True

[EnergyMonitor]
sampling_frequency = 10
n_samples_per_recording_entry = 100

[EnergySavings]
# Valid options:
# True  Which will make sure the board is off at this point
# False Which will make sure the board is on at this point
# WARNING To ensure the machine is completly powered down machine are only
# turned on after 20 seconds so do not use for small scripts!
turn_off_board_after_discovery = False

[Java]
use_java = False
# call to start a java process.
# If there is no jdk../bin in your class path this must include the full path
java_call = java
# Absolute path to where the JavaSpiNNaker git repository is located.
# If none it will be assumed to be in the same parent directory as SpiNNFrontEndCommon
# Note: Do not quote even if path has spaces as these added by subprocess.call
java_spinnaker_path = None
# Properties flag to be passed into every java call.
# Default logging level is info so NO properties needed
java_properties = None
# Each Property must start with the -D flag
# To turn on debug level logging (lots)
# java_properties=-Dlogging.level=DEBUG
# Multiple properties are supported.
# Properties must be separated with a space and without quotes.
# java_properties=-Dspinnaker.compare.download -Dlogging.level=DEBUG
# Supported properties are:
#     spinnaker.compare.download  (enables comparisons of multiple download methods; slow)
#     spinnaker.parallel_tasks    (how many downloads to do in parallel; default: 4)
#     logging.level  (defaults to INFO; DEBUG is also useful)
#     logging.udp    (enables low-level logging of UDP traffic; produces a lot of output)
#     spinnaker.scp_timeout       (how long to wait for SCP replies from
#                                 SpiNNaker, in milliseconds, which may need to
#                                 be raised on very busy networks; default: 1000)
